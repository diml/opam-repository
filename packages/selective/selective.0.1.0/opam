opam-version: "2.0"
maintainer: "jeremie@dimino.org"
authors: ["Andrey Mokhov <andrey.mokhov@gmail.com>"
          "Jeremie Dimino <jeremie@dimino.org>"]
homepage: "https://github.com/snowleopard/selective-ocaml"
bug-reports: "https://github.com/snowleopard/selective-ocaml/issues"
dev-repo: "git+https://github.com/snowleopard/selective-ocaml.git"
doc: "https://snowleopard.github.io/selective-ocaml/"
license: "MIT"
depends: [
  "ocaml" {>= "4.02"}
  "dune" {build & >= "1.5"}
  "ppx_expect" {with-test}
]
build: [
  ["dune" "build" "-p" name "-j" jobs]
  ["dune" "runtest" "-p" name "-j" jobs] {with-test}
]
synopsis: "Selective applicative functors in OCaml"
description: """
This is a study of selective applicative functors, an abstraction
between Applicative and Monad. The idea was first prototyped in
Haskell, and now we are exploring its translation to OCaml.

See examples in the doc directory.
"""
url {
  src:
    "https://github.com/snowleopard/selective-ocaml/releases/download/0.1.0/selective-0.1.0.tbz"
  checksum: "md5=85de6935debe7988f843bf1fca3df8ca"
}
